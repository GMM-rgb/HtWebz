<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Electrical Wires Pulse</title>
    <style>
        body { 
            margin: 0; 
            overflow: hidden; 
            background-color: #1a1a2e;
        }
        canvas {
            display: block;
        }
    </style>
</head>
<body>
    <canvas id="electricalCanvas"></canvas>
    <script>
        const canvas = document.getElementById('electricalCanvas');
        const ctx = canvas.getContext('2d');

        // Resize canvas to full window
        function resizeCanvas() {
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
        }
        window.addEventListener('resize', resizeCanvas);
        resizeCanvas();

        // Electrical wire properties
        const wireCount = 5;
        const wireColor = '#2a2a3a';
        const pulseColor = 'rgba(0, 255, 255, 0.7)';
        const wireWidth = 10;

        // Pulse animation variables
        let pulsePositions = [];
        for (let i = 0; i < wireCount; i++) {
            pulsePositions.push({
                x: canvas.width * 0.9, 
                y: (canvas.height / (wireCount + 1)) * (i + 1),
                progress: Math.random() * Math.PI * 2
            });
        }

        function drawWires() {
            ctx.fillStyle = wireColor;
            for (let i = 0; i < wireCount; i++) {
                const y = (canvas.height / (wireCount + 1)) * (i + 1);
                ctx.fillRect(canvas.width * 0.9, y, wireWidth, canvas.height * 0.05);
            }
        }

        function animatePulses() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            
            // Draw wires
            drawWires();

            // Animate and draw pulses
            pulsePositions.forEach((pulse, index) => {
                // Update pulse position
                pulse.progress += 0.05;
                
                // Calculate pulse size and opacity
                const pulseSize = Math.sin(pulse.progress) * 50 + 60;
                const opacity = Math.abs(Math.sin(pulse.progress));

                // Draw pulse
                ctx.beginPath();
                ctx.fillStyle = `rgba(0, 255, 255, ${opacity})`;
                ctx.arc(
                    pulse.x + wireWidth / 2, 
                    pulse.y, 
                    pulseSize, 
                    0, 
                    Math.PI * 2
                );
                ctx.fill();

                // Reset pulse if it completes a cycle
                if (pulse.progress > Math.PI * 2) {
                    pulse.progress = 0;
                }
            });

            // Continue animation
            requestAnimationFrame(animatePulses);
        }

        // Start animation
        animatePulses();
    </script>
</body>
</html>
